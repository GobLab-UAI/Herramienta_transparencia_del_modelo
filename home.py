
import streamlit as st
from datetime import datetime
import smtplib
import ssl
from email.message import EmailMessage

from rendering import generate_pdf, download_button
from template import MODEL_CARD_HTML_TEMPLATE

import uuid
from database import client, DB_NAME, COLLECTION_NAME

db = client[DB_NAME]
collection = db[COLLECTION_NAME]

feedback_collection = db["feedback"]

class SafeDict(dict):
    def __missing__(self, key):
        return ''

# TODO: Tengo que colocar los botones para siguiente tab dentro de cada tab (que del tab0 pase al tab1 y as√≠ sucesivamente)

# Funci√≥n para guardar los datos en MongoDB
def guardar_en_mongodb_feedback(datos):
    try:
        # Generar un identificador √∫nico para este documento
        datos["_id"] = str(uuid.uuid4())
        # Insertar el documento en la colecci√≥n
        feedback_collection.insert_one(datos)
        st.sidebar.success("Feedback registrado con √©xito.")
    except Exception as e:
        st.sidebar.error("Error al guardar feedback en base de datos")


# Funci√≥n para guardar los datos en MongoDB
def guardar_en_mongodb(datos):
    try:
        # Generar un identificador √∫nico para este documento
        datos["_id"] = str(uuid.uuid4())
        # Insertar el documento en la colecci√≥n
        collection.insert_one(datos)
        st.success("Datos guardados con √©xito.")
    except Exception as e:
        st.error(f"Error al guardar en la base de datos: {e}")

# M√©todo para enviar un correo electr√≥nico
def send_feedback_email(feedback):
    try:
        # Configura los detalles del correo electr√≥nico
        msg = EmailMessage()
        msg['Subject'] = 'Nuevo feedback para la Model UAI'
        msg['From'] = 'jspinad@gmail.com'
        msg['To'] = 'goblab@uai.cl'
        msg.set_content(feedback)

        context = ssl.create_default_context()

        # Configura los par√°metros del servidor SMTP y env√≠a el correo electr√≥nico
        with smtplib.SMTP_SSL('smtp.gmail.com', 465,context=context) as smtp:
            smtp.login('jspinad@gmail.com', 'caar kfqv zjoo isfn')
            smtp.sendmail("jspinad@gmail.com","goblab@uai.cl",msg.as_string())
        
        guardar_en_mongodb_feedback({"feedback": feedback})
        st.success("¬°Feedback enviado con √©xito!")
    except Exception as e:
        st.error("Error al enviar el feedback.")
        st.error(e)

def preparar_seccion_html(clave, valor, prefijo="", sufijo=""):
    """Devuelve una cadena HTML para la secci√≥n si el valor no est√° vac√≠o, de lo contrario devuelve una cadena vac√≠a."""
    if valor:  # Verifica si el valor existe y no est√° vac√≠o
        return f"{prefijo}{clave}: {valor}{sufijo}"
    return ""

# Definir una funci√≥n para verificar si todos los campos obligatorios est√°n llenos
def verificar_campos_obligatorios():
    campos_obligatorios =[
                    "nombre_modelo","desarrollador_modelo","tipo_modelo",
                    "proposito_modelo","UsoPrevisto_modelo",
                    "metricas_modelo","datos_modelo","preprocesamiento_modelo",
                    "conjunto_datos_eval_modelo","preprocesamiento_evaluacion","TA_modelo_categoriza",
                    "TA_datos_personales","dato_sensible","asuntos_centrales_modelo","TA_reclamacion"
                    ]
    
    for campo in campos_obligatorios:
        if campo not in questions or questions[campo] == "" or questions[campo] is None:
            return campo
    return "all"

st.sidebar.title("Feedback")
# Crea un formulario para el feedback
with st.sidebar.form(key='feedback_form'):
    feedback = st.text_area("üí¨ Si tienes alguna sugerencia o comentario, deja tu feedback aqu√≠:")
    submit_button = st.form_submit_button(label='Enviar Feedback üöÄ ')

    if submit_button and feedback:
        send_feedback_email(feedback)
        

SHORT_STRING = 100
LONG_STRING = 1000

col1, col2, col3 = st.columns(3)

# Mostrar la primera imagen en la primera columna
with col1:
    st.write("")
    st.image("_statics/Logo_herramientas_algoritmos.png")
with col2:
    #st.image("_statics/UAI.png")
    pass
# Mostrar la segunda imagen en la segunda columna
with col3:
    st.image("_statics/Goblab.png")

title = "Ficha de transparencia"
st.markdown(f"<h3 style='text-align: left; color: black;'>V.2.0.0</h3>", unsafe_allow_html=True)
st.markdown(f"<h1 style='text-align: center; color: black;'>{title}</h1>", unsafe_allow_html=True)

st.write("""La presente herramienta es un apoyo para la elaboraci√≥n de una ficha de transparencia para sistemas de decisiones automatizadas o semiautomatizadas (SDA), con el prop√≥sito de ayudar a los organismos p√∫blicos a cumplir con los est√°ndares de transparencia algor√≠tmica de sus sistemas. 
         
Est√° destinada para ser utilizada en SDA que hayan completado la fase de desarrollo y evaluaci√≥n, antes de la fase de implementaci√≥n de la soluci√≥n. Para m√°s informaci√≥n sobre las fases, consultar la Gu√≠a Permitido Innovar (https://www.lab.gob.cl/permitido-innovar).
La ficha de transparencia es un documento que proporciona informaci√≥n relevante sobre la naturaleza, aspectos t√©cnicos, funcionales y del proyecto del SDA. Desempe√±a un papel fundamental en la promoci√≥n de la transparencia, la rendici√≥n de cuentas y el uso √©tico de los algoritmos. La herramienta facilita la creaci√≥n de esta ficha: ayuda a la identificaci√≥n de la informaci√≥n relevante sobre el SDA que se debe transparentar y la presenta de manera clara, visible y comprensible tanto para los involucrados en el proceso institucional como para cualquier persona interesada.

La herramienta consta de un total de 44 preguntas distribuidas en 9 secciones. Para completar adecuadamente todos los campos de la ficha, se requiere la participaci√≥n de un equipo multidisciplinario de la instituci√≥n, que incluya roles como el jefe de proyecto, analista de datos, responsable de datos, equipo legal, y encargado de comunicaciones y todos los dem√°s que considere la instituci√≥n. 

Todas las preguntas marcadas con un asterisco (:red[*]) son preguntas obligatorias. Al terminar de responder las preguntas, se debe marcar el bot√≥n **‚Äúdescargar ficha‚Äù** para acceder a la ficha de transparencia en formato *PDF*. 
    
Durante el uso de la herramienta, la informaci√≥n no es almacenada por la plataforma, para resguardar la privacidad de los datos que sean ingresados en los campos.

Esta herramienta se basa en el enfoque de Model Cards for Model Reporting (Mitchell, 2019). """)

st.write("Est√°s listo? üîú")


questions = {}

tab1, tab2 = st.tabs(["1.Visi√≥n general üëÅÔ∏è", "2.Detalles del modelo üìÑ"])
tab3, tab4, tab5, tab6 = st.tabs(["3.Clasificaci√≥n ‚òØ", "4.M√©tricas de rendimiento üìà", "5.Datos de entrenamiento üíø", "6.Datos de evaluaci√≥n üß™"])
tab8, tab9, tab10 = st.tabs(["7.Consideraciones √©ticas üß†", "8.Advertencias y recomendaciones ‚ö†Ô∏è", "9.Reclamaci√≥n üö®"])

with tab1:

    st.header("Visi√≥n general del modelo üìä")

    questions["nombre_modelo"] = st.text_input("1.Nombre del modelo :red[*]", max_chars=SHORT_STRING) #Obligatorio
    questions["tipo_modelo"] = st.text_area("2.¬øQu√© tipo de modelo es? :red[*] :red[antes 5]", placeholder="Esto incluye detalles b√°sicos de la arquitectura del modelo, como si es un clasificador de Naive Bayes, una Red Neuronal Convolucional, etc. Esto es probablemente relevante para desarrolladores de software y modelos, as√≠ como para personas conocedoras de aprendizaje autom√°tico, para resaltar qu√© tipos de suposiciones est√°n codificadas en el sistema.",max_chars=LONG_STRING) #Obligatorio
    questions["proposito_modelo"] = st.text_area("3.Describa el prop√≥sito y funcionalidad del modelo :red[*] :red[antes 10]", max_chars=LONG_STRING) #Obligatorio
    questions["TA_porque_modelo"] = st.text_area("4.*¬øPor qu√© se decidi√≥ utilizar este SDA en lugar de otro tipo de soluci√≥n?* :red[antes 11]", max_chars=LONG_STRING)
    questions["TA_alcanzar_resultados"] = st.text_area("5.*¬øC√≥mo el modelo alcanza u obtiene sus resultados?* :red[antes 12]",placeholder="Describa el flujo de funciomaiento de su sistema para generar un resultado" , max_chars=LONG_STRING)
    questions["UsoPrevisto_modelo"] = st.text_area("6.¬øCu√°l es el uso previsto del 'modelo'? :red[*] :red[antes 13]", placeholder="¬øQu√© puede esperar el usuario directo del modelo al emplearlo?. Esta secci√≥n detalla si el modelo se desarroll√≥ con tareas generales o espec√≠ficas en mente. Los casos de uso pueden estar definidos de manera amplia o estrecha seg√∫n lo que los desarrolladores pretendan. Por ejemplo, si el modelo se construy√≥ simplemente para etiquetar im√°genes, esta tarea deber√≠a indicarse como el caso de uso principal previsto.", max_chars=LONG_STRING) #Obligatorio
    questions["UsosNocontext_modelo"] = st.text_area("7.¬øQu√© usos est√°n fuera del alcance del modelo? :red[antes 14]", placeholder="Aqu√≠, la ficha del modelo deber√≠a resaltar la tecnolog√≠a con la que el modelo podr√≠a confundirse f√°cilmente, o contextos relacionados a los que los usuarios podr√≠an intentar aplicar el modelo.", max_chars=LONG_STRING)

    # Genera secciones HTML para cada secci√≥n si el valor no est√° vac√≠o

    questions["TA_porque_modelo_line"] = preparar_seccion_html("Razones de usar el modelo para tomar decisiones", questions["TA_porque_modelo"], prefijo="<li>", sufijo="</li>")
    questions["TA_alcanzar_resultados_line"] = preparar_seccion_html("Forma en la que el modelo obtiene resultados", questions["TA_alcanzar_resultados"], prefijo="<li>", sufijo="</li>")
    
    questions["UsosNocontext_modelo_line"] = preparar_seccion_html("Usos fuera del alcance del modelo", questions["UsosNocontext_modelo"], prefijo="<li>", sufijo="</li>")


with tab2:
    st.header("Detalles del modelo üìÑ")

    
    questions["desarrollador_modelo"] = st.text_area("8.¬øQu√© persona u organizaci√≥n desarroll√≥ el modelo? :red[*] :red[antes 2]", placeholder=" Esto puede ser utilizado por todas las partes interesadas para inferir detalles relacionados con el desarrollo del modelo y posibles conflictos de inter√©s.",max_chars=SHORT_STRING)#Obligatorio
    questions["version_modelo"] = st.text_input("9.¬øCu√°l es la versi√≥n del modelo? :red[antes 3]", placeholder="Describa el n√∫mero de la versi√≥n del modelo. Ej: 1.0.0",max_chars=SHORT_STRING)
    questions["fecha_modelo"] = st.date_input("10.¬øCu√°ndo se despleg√≥ o implement√≥ este modelo? :red[antes 4] Esto es √∫til para que todas las partes interesadas se informen sobre las t√©cnicas y fuentes de datos que probablemente estuvieron disponibles durante el desarrollo del modelo.", value=None) #Obligatorio
    if questions["fecha_modelo"] is not None: #TODO: Revisar el render de la pregunta ya que no es obligatoria
        questions["fecha_modelo"] = questions["fecha_modelo"].strftime("%d/%m/%Y")
    else:
        questions["fecha_modelo"] = ""

    

    questions["link_modelo"] = st.text_input("11.¬øD√≥nde se pueden encontrar recursos para obtener informaci√≥n adicional del proyecto? :red[antes 6]", placeholder="Por ejemplo, link a la p√°gina institucional",max_chars=LONG_STRING)
    questions["cita_modelo"] = st.text_area("12.¬øC√≥mo deber√≠a citarse el modelo? :red[antes 7]", max_chars=LONG_STRING)
    questions["licencia_modelo"] = st.text_input("13.¬øQu√© tipo de licencia tiene el modelo? :red[antes 8]", max_chars=SHORT_STRING)
    questions["contacto_modelo"] = st.text_area("14.¬øHay alg√∫n canal de reclamos o sugerencias mediante los cuales las personas puedan solicitar m√°s informaci√≥n? :red[antes 9]", max_chars=LONG_STRING)

    # Genera secciones HTML para cada secci√≥n si el valor no est√° vac√≠o y si no son obligatorios

    questions["link_modelo_line"] = preparar_seccion_html("Enlace", questions["link_modelo"], prefijo="<li>", sufijo="</li>")
    questions["cita_modelo_line"] = preparar_seccion_html("¬øC√≥mo citar?", questions["cita_modelo"], prefijo="<li>", sufijo="</li>")
    questions["licencia_modelo_line"] = preparar_seccion_html("Licencia del modelo", questions["licencia_modelo"], prefijo="<li>", sufijo="</li>")
    questions["contacto_modelo_line"] = preparar_seccion_html("Contacto", questions["contacto_modelo"], prefijo="<li>", sufijo="</li>")


with tab3:
    st.header("  Clasificaci√≥n ‚òØ")
    questions["TA_classModelo"] = st.radio("15.  ¬øEs el modelo de clasificaci√≥n?",options=["S√≠","No"],index=1)
    questions["TA_classModelo_categorias"] = None
    questions["TA_classModel_metodologia"] = None
    questions["TA_classModelo_efecto_variables"] = None
    questions["TA_classModelo_relevancia_categoria"] = None

    if questions["TA_classModelo"] == "S√≠":
        questions["TA_classModelo_visible"] = ""
        #Obligatorios
        questions["TA_classModelo_categorias"] = st.text_area("16.  ¬øQu√© perfiles o categor√≠as asigna o existen? :red[*]", max_chars=SHORT_STRING)#Obligatorio
        
        #Opcionales
        questions["TA_classModel_metodologia"] = st.text_area("17.¬øQu√© forma, metodolog√≠a o mecanismo usa el modelo para clasificar los datos? ¬øCu√°les son los umbrales de decisi√≥n?", max_chars=SHORT_STRING)
        questions["TA_classModelo_efecto_variables"] = st.text_area("18.  ¬øQu√© efecto tiene cada variable o par√°metro en la asignaci√≥n de categor√≠a, etiqueta, perfil o posici√≥n?", max_chars=SHORT_STRING)
        questions["TA_classModelo_relevancia_categoria"] = st.text_area("19.  ¬øPor qu√© la categor√≠a, perfil o prioridad es relevante para que el modelo alcance sus resultados?", max_chars=LONG_STRING)

        questions["TA_classModel_metodologia_line"] = preparar_seccion_html("Mecanismo utilizado para clasificar datos", questions["TA_classModel_metodologia"], prefijo="<li>", sufijo="</li>")
        questions["TA_classModelo_efecto_variables_line"] = preparar_seccion_html("Efecto de las variables en la asignaci√≥n de las categor√≠as", questions["TA_classModelo_efecto_variables"], prefijo="<li>", sufijo="</li>")
        questions["TA_classModelo_relevancia_categoria_line"] = preparar_seccion_html("Relevancia de la categor√≠a para el modelo", questions["TA_classModelo_relevancia_categoria"], prefijo="<li>", sufijo="</li>")
    else:
        questions["TA_classModelo_visible"] = "hidden"

with tab4: 
    st.header("M√©tricas de rendimiento üìà")
    #Obligatorios
    questions["metricas_modelo"] = st.text_area("20.¬øQu√© m√©tricas utiliza para medir el rendimiento de su modelo? :red[*]", max_chars=LONG_STRING)
    questions["umbralDesicion_modelo"] =  st.slider("21.¬øCu√°l es el umbral de decisi√≥n del modelo?", min_value=0.0, max_value=1.0, value=0.5, step=0.1) #TODO: Revisar el render si no hay valor.
    #Opcionales
    questions["calculo_mediciones_modelo"] = st.text_area("22.¬øC√≥mo se calculan las mediciones y estimaciones de estas m√©tricas?", placeholder="Por ejemplo, esto puede incluir desviaci√≥n est√°ndar, varianza, intervalos de confianza o divergencia KL. Tambi√©n se deben incluir detalles sobre c√≥mo se aproximan estos valores (por ejemplo, promedio de 5 ejecuciones, validaci√≥n cruzada de 10 pliegues).", max_chars=LONG_STRING)

    questions["calculo_mediciones_modelo_line"] = preparar_seccion_html("Forma en la que se estiman las m√©tricas:", questions["calculo_mediciones_modelo"], prefijo="<p>", sufijo="</p>")

with tab5:
    st.header("Datos de entrenamiento üíø")
    #Obligatorios
    questions["datos_modelo"] = st.text_area("23.¬øQu√© datos se utilizaron para el entrenamiento del modelo? :red[*]", max_chars=LONG_STRING) 
    questions["preprocesamiento_modelo"] = st.text_area("24.¬øSe aplicaron pasos de pre-procesamiento o limpieza a los datos? ¬øCu√°les? :red[*]", max_chars=LONG_STRING) 

with tab6:
    st.header("Datos de evaluaci√≥n üß™")
    
    questions["conjunto_datos_eval_modelo"] = st.text_area("25.¬øQu√© conjuntos de datos se utilizaron para evaluar el modelo? :red[*]", max_chars=LONG_STRING) #Obligatoria
    questions["eleccion_evaluacion"] = st.text_area("26.¬øPor qu√© se eligieron estos conjuntos de datos?", max_chars=LONG_STRING)
    questions["preprocesamiento_evaluacion"] = st.text_area("27.¬øC√≥mo se preprocesaron los datos para la evaluaci√≥n? :red[*]", placeholder="(por ejemplo, tokenizaci√≥n de oraciones, recorte de im√°genes, cualquier filtrado como eliminar im√°genes sin caras)", max_chars=LONG_STRING) #Obligatoria

    questions["eleccion_evaluacion_line"] = preparar_seccion_html("<strong>Justificaci√≥n de la elecci√≥n del modelo</strong>", questions["eleccion_evaluacion"], prefijo="<p>", sufijo="</p>")

#with tab7:
#    st.header("An√°lisis cuantitativo #Ô∏è‚É£")

#    st.write("""Los an√°lisis cuantitativos deben desagregarse, es decir, desglosarse seg√∫n los factores elegidos. Los an√°lisis cuantitativos deben proporcionar los resultados de la evaluaci√≥n del modelo seg√∫n las m√©tricas seleccionadas, 
#             brindando valores de intervalo de confianza cuando sea posible. La paridad en las diferentes m√©tricas entre los subgrupos poblacionales desglosados corresponde a c√≥mo se define a menudo la equidad. """)

#    questions["analisis_modelo"] = st.text_area("28.¬øC√≥mo le fue al modelo con respecto a cada factor?", max_chars=LONG_STRING)
#    questions["analisis_errores_modelo"] = st.text_area("29.¬øC√≥mo le fue al modelo con respecto a la intersecci√≥n de los factores evaluados?", max_chars=LONG_STRING)

with tab8:
    st.header("Consideraciones √©ticas üß†")

    questions["TA_modelo_categoriza"] = st.radio("30.  ¬øEl modelo categoriza o perfila a las personas? :red[*]",options=["S√≠","No"]) #obligatorio
    # Esta depende de la anterior
    if questions["TA_modelo_categoriza"] == "S√≠":
        questions["TA_razones_decision_negativa_personas"] = st.text_area("31.  ¬øQu√© circunstancias llevan a una decisi√≥n negativa respecto de la persona?", max_chars=LONG_STRING)
        questions["TA_razones_decision_negativa_personas_line"] = preparar_seccion_html("Circunstancias de decisi√≥n negativa", questions["TA_razones_decision_negativa_personas"], prefijo="<p>", sufijo="</p>")
    
    questions["TA_datos_personales"] = st.radio("32.  ¬øEl modelo utiliza datos personales? :red[*]",options=["S√≠","No"]) #obligatorio
    questions["TA_razones_datos_personales"] = None

    if questions["TA_datos_personales"] == "S√≠":
        questions["TA_razones_datos_personales"] = st.text_area("32.1.¬øCu√°les?", max_chars=SHORT_STRING)
        questions["TA_razones_datos_personales_line"] = preparar_seccion_html("Datos personales utilizados: ", questions["TA_razones_datos_personales"], prefijo="<p>", sufijo="</p>")
    

    questions["dato_sensible"] = st.radio("33.¬øEl modelo utiliza alg√∫n dato sensible (por ejemplo, ley antidiscriminaci√≥n)? :red[*]",options=["S√≠","No"]) #obligatorio
    questions["dato_sensible_tipo"] = None

    if questions["dato_sensible"] == "S√≠":
        questions["dato_sensible_tipo"] = st.text_area("33.1.¬øCu√°les tipos de datos sensibles se utilizaron?", max_chars=SHORT_STRING) 
        
        questions["dato_sensible_tipo_line"] = preparar_seccion_html("Datos sensibles utilizados: ", questions["dato_sensible_tipo"], prefijo="<p>", sufijo="</p>")
    
    questions["asuntos_centrales_modelo"] = st.radio("34.¬øSe pretende que el modelo informe decisiones sobre asuntos centrales para la vida o el florecimiento humano, como la salud o la seguridad? ¬øO podr√≠a usarse de esa manera? :red[*]",options=["S√≠","No"]) #obligatorio
    questions["asuntos_centrales_tipo"] = None

    if questions["asuntos_centrales_modelo"] == "S√≠":
        questions["asuntos_centrales_tipo"] = st.text_area("34.1.¬øCu√°les? :red[*]", max_chars=SHORT_STRING) #obligatorio
        questions["asuntos_centrales_tipo_line"] = preparar_seccion_html("Asuntos centrales para la vida", questions["asuntos_centrales_tipo"], prefijo="<p>", sufijo="</p>")
    
    questions["estrategias_mitigaciones_modelo"] = st.text_area("35.¬øQu√© estrategias de mitigaci√≥n de riesgos se utilizaron durante el desarrollo del modelo? :red[*]", max_chars=LONG_STRING) #Opcional
    questions["riesgos_uso_modelo"] = st.text_area("36.¬øQu√© riesgos pueden estar presentes en el uso del modelo?", placeholder="Trate de identificar a los posibles receptores, la probabilidad y la magnitud de los da√±os. Si no se pueden determinar, indique que se consideraron pero siguen siendo desconocidos.", max_chars=LONG_STRING) 
    questions["casos_uso_conocidos"] = st.text_area("37.¬øHay casos de uso conocidos del modelo que sean especialmente problem√°ticos?", max_chars=LONG_STRING) #Casos de uso problematicos
    questions["otra_consideracion"] = st.text_area("38.De existir alguna otra consideraci√≥n √©tica adicional que se haya tenido en cuenta en el desarrollo del modelo, indicar en este apartado.", placeholder="Por ejemplo, revisi√≥n por parte de un consejo externo o pruebas con una comunidad espec√≠fica.", max_chars=LONG_STRING)


    questions["riesgos_uso_modelo"] = preparar_seccion_html("<strong>Riesgos del modelo</strong>", questions["riesgos_uso_modelo"], prefijo="<p>", sufijo="</p>")
    questions["estrategias_mitigaciones_modelo_line"] = preparar_seccion_html("<strong>Estrategias de mitigaci√≥n de riesgos</strong>", questions["estrategias_mitigaciones_modelo"], prefijo="<p>", sufijo="</p>")
    questions["casos_uso_conocidos_line"] = preparar_seccion_html("<strong>Casos de uso problem√°ticos</strong>", questions["casos_uso_conocidos"], prefijo="<p>", sufijo="</p>")
    questions["otra_consideracion_line"] = preparar_seccion_html("<strong>Otras consideraciones</strong>", questions["otra_consideracion"], prefijo="<p>", sufijo="</p>")

with tab9:
    st.header("Advertencias y recomendaciones ‚ö†Ô∏è")

    questions["prueba_adicional"] = st.text_area("39.¬øLos resultados sugieren alguna prueba adicional?", max_chars=LONG_STRING) #Opcional #correcciones, siguientes pasos
    questions["grupo_relevante"] = st.radio("40.¬øHubo alg√∫n grupo relevante que no estuvo representado en el conjunto de datos de evaluaci√≥n?",options=["S√≠","No"]) #Opcional
    questions["recomendaciones_adicionales"] = st.text_area("41.¬øExisten recomendaciones adicionales para el uso del modelo? ", max_chars=LONG_STRING) #Opcional
    questions["caracteristicas_ideales"] = st.text_area("42.¬øCu√°les son las caracter√≠sticas ideales de un conjunto de datos de evaluaci√≥n para este modelo?", placeholder="Ejemplos: \n Carpeta con im√°genes de 20x20 \n Archivo csv con las columnas: edad,genero,salario, etc \n formulario predefinido con todas las respuestas",max_chars=LONG_STRING) #que variables tiene que tener el dataset que uses para 

    questions["prueba_adicional_line"] = preparar_seccion_html("<strong>Pruebas adicionales</strong>", questions["prueba_adicional"], prefijo="<p>", sufijo="</p>")    
    questions["recomendaciones_adicionales_line"] = preparar_seccion_html("<strong>Recomendaciones adicionales</strong>", questions["recomendaciones_adicionales"], prefijo="<p>", sufijo="</p>")
    questions["caracteristicas_ideales_line"] = preparar_seccion_html("<strong>Caracter√≠sticas ideales del conjunto de datos</strong>", questions["caracteristicas_ideales"], prefijo="<p>", sufijo="</p>")
with tab10:
    st.header("  Reclamaci√≥n üö®")

    st.write("En caso de ser necesario apelar a una decisi√≥n del modelo, debe de existir un m√©todo establecido para hacer llegar los reclamos de los usuarios. ")

    questions["TA_reclamacion"] = st.radio("43.  ¬øExiste una v√≠a de reclamaci√≥n especial respecto de las decisiones del modelo? :red[*]",options=["S√≠","No"]) #obligatorio pero debe tener un texto al renderizar
    questions["TA_via_reclamacion"] = None
    
    if questions["TA_reclamacion"] == "S√≠":
        questions["TA_reclamacion_visible"] = True
        questions["TA_via_reclamacion"] = st.text_area("44.  ¬øCu√°l es la forma de acceder a la v√≠a de reclamaci√≥n? :red[*]", max_chars=LONG_STRING) #Obligatorio
        questions["TA_via_reclamacion_line"] = preparar_seccion_html("<strong>V√≠a de reclamaci√≥n</strong>", questions["TA_via_reclamacion"], prefijo="<p>", sufijo="</p>")
    else: 
        questions["TA_reclamacion_visible"] = False


submitted = st.button("Generar Ficha de transparencia")

if submitted:
    # Generaci√≥n del PDF
    campos_verificados = verificar_campos_obligatorios()
    
    if campos_verificados != "all":
        st.error("No se han completado todos los campos obligatorios. Por favor, complete el campo: " + campos_verificados)  
    else:

        questions["year"] = datetime.now().year
        # Colocar el mes de elaboraci√≥n
        questions["elaboration_date"] = datetime.now().month
        try:
            print(questions)
            pdf = generate_pdf(MODEL_CARD_HTML_TEMPLATE.format_map(SafeDict(questions)))
            st.success("Ficha de transparencia generada con √©xito.")
            # Bot√≥n de descarga
            download_button(pdf, "ficha_transparencia.pdf", "Descargar Ficha de transparencia en PDF")

            guardar_en_mongodb(questions)

        except Exception as e:
            st.error("Error al generar la Ficha de transparencia, intentelo m√°s tarde.")

st.sidebar.title("Agradecimientos")
st.sidebar.write("ANID + Subdirecci√≥n de Investigaci√≥n Aplicada/Concurso IDeA I+D 2023 + ID23I10357")
# Dividir la p√°gina en dos columnas
st.sidebar.subheader("Una iniciativa en colaboraci√≥n con:")
st.sidebar.image("_statics/ANID.png",width=100)
#st.sidebar.image("_statics/BidLab.png",width=100)
